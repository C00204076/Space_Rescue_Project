//
// C00
// Paul Nolan
// C00204076
// Brandon Seah-Dempsey
// Started at 9:52 7 January 2020
// Finished at
// Time taken:
// Known bugs:

#ifndef TILEMAP_H
#define TILEMAP_H

#include "Tile.h"
#include <list>
//
class TileMap
{
public:
	TileMap(float gridSize);
	~TileMap();

	void update(sf::Time deltaTime, sf::RenderWindow& window);
	void render(sf::RenderWindow& window);
	void render(sf::RenderWindow& window, sf::Vector2f scale);

	void createCostField();
	void resetField();
	void findAdjacentCells();
	std::list<Tile*> createPath(sf::Vector2f t_currentPosition, sf::Vector2i& t_targetIndex, bool t_newPathNeeded);
	void findLowestNeighbours(Tile* t_tile, float t_angle);

	void setValues();
	sf::Vector2f getTile(int i, int j);
private:
	void initialise();

	float m_maxSize;
	Tile* m_tiles[30][30];
	sf::Vector2f m_tilePos[30][30];

	sf::Vector2i m_startPoint;
	sf::Vector2i m_endPoint;

	sf::Vector2i m_northPoint;
	sf::Vector2i m_westPoint;
	sf::Vector2i m_southPoint;
	sf::Vector2i m_eastPoint;

	sf::Vector2i m_northEastPoint;
	sf::Vector2i m_northWestPoint;
	sf::Vector2i m_southEastPoint;
	sf::Vector2i m_southWestPoint;

	std::list<Tile*> m_list;

	sf::Vector2i m_keyPointStorage[9];
	sf::Vector2i m_keyPointIndexs[3][3];

	int m_map[30][30] = {
	{ 9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, } ,
	{ 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10,  9,  10,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9, 10,  0,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  9,  10,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  10,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  10,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  9, } ,
	{ 9,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9, 10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  9,  10,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  10,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  9,  9,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  10,  9,  9,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  9,  9,  10,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  10,  9,  9,  9,  9,  9,  10,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10,  9,  9,  10,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  0,  9, } ,
	{ 9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9, } ,
	{ 9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9,  9, } ,
	};																									  

};

#endif // !TILEMAP_H
